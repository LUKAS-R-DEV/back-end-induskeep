import { HistoryRepository } from "../infrastructure/HistoryRepository.js";
import { MaintenanceOrderRepository } from "../../maintenanceOrder/infrastructure/MaintenanceOrderRepository.js";
import { History } from "../domain/History.js";
import { AppError } from "../../../shared/errors/AppError.js";

export const HistoryService = {
  // üìç Lista todo o hist√≥rico
  async list() {
    try {
      return await HistoryRepository.findAll();
    } catch (error) {
      console.error("‚ùå Erro ao listar hist√≥rico:", error);
      throw new AppError("Erro interno ao listar hist√≥rico.", 500);
    }
  },

  // üìç Cria um novo registro de hist√≥rico
  async create(data) {
    if (!data.orderId) {
      throw new AppError("ID da ordem de manuten√ß√£o √© obrigat√≥rio.", 400);
    }

    try {
      const order = await MaintenanceOrderRepository.findById(data.orderId);
      if (!order) {
        throw new AppError("Ordem de manuten√ß√£o n√£o encontrada.", 404);
      }

      await MaintenanceOrderRepository.update(data.orderId, {
        status: "COMPLETED",
      });

      const history = new History({
        orderId: data.orderId,
        notes: data.notes,
      });

      const savedHistory = await HistoryRepository.create(history);
      return savedHistory;
    } catch (error) {
      if (error instanceof AppError) throw error;
      console.error("‚ùå Erro ao criar hist√≥rico:", error);
      throw new AppError("Erro interno ao criar hist√≥rico.", 500);
    }
  },

  // üìç Busca hist√≥rico por ordem
  async findByOrder(orderId) {
    if (!orderId) {
      throw new AppError("ID da ordem de manuten√ß√£o √© obrigat√≥rio.", 400);
    }

    try {
      return await HistoryRepository.findByOrder(orderId);
    } catch (error) {
      if (error instanceof AppError) throw error;
      console.error("‚ùå Erro ao buscar hist√≥rico da ordem:", error);
      throw new AppError("Erro interno ao buscar hist√≥rico da ordem.", 500);
    }
  },

  // üìç Busca um registro de hist√≥rico por ID
  async findById(id) {
    if (!id) {
      throw new AppError("ID do hist√≥rico n√£o informado.", 400);
    }

    try {
      const history = await HistoryRepository.findById(id);
      if (!history) {
        throw new AppError("Hist√≥rico n√£o encontrado.", 404);
      }
      return history;
    } catch (error) {
      if (error instanceof AppError) throw error;
      console.error("‚ùå Erro ao buscar hist√≥rico:", error);
      throw new AppError("Erro interno ao buscar hist√≥rico.", 500);
    }
  },

  // üìç Atualiza um registro de hist√≥rico
  async update(id, data) {
    if (!id) {
      throw new AppError("ID do hist√≥rico n√£o informado.", 400);
    }
    if (!Object.keys(data).length) {
      throw new AppError("Nenhum dado informado para atualiza√ß√£o.", 400);
    }

    const found = await HistoryRepository.findById(id);
    if (!found) {
      throw new AppError("Hist√≥rico n√£o encontrado.", 404);
    }

    try {
      return await HistoryRepository.update(id, data);
    } catch (error) {
      if (error instanceof AppError) throw error;
      console.error("‚ùå Erro ao atualizar hist√≥rico:", error);
      throw new AppError("Erro interno ao atualizar hist√≥rico.", 500);
    }
  },

  // üìç Remove um registro de hist√≥rico
  async remove(id) {
    if (!id) {
      throw new AppError("ID do hist√≥rico n√£o informado.", 400);
    }

    const found = await HistoryRepository.findById(id);
    if (!found) {
      throw new AppError("Hist√≥rico n√£o encontrado.", 404);
    }

    try {
      await HistoryRepository.delete(id);
      return { message: "Hist√≥rico removido com sucesso." };
    } catch (error) {
      if (error instanceof AppError) throw error;
      console.error("‚ùå Erro ao remover hist√≥rico:", error);
      throw new AppError("Erro interno ao remover hist√≥rico.", 500);
    }
  },
};