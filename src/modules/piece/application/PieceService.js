import { PieceRepository } from "../infrastructure/PieceRepository.js";
import { Piece } from "../domain/Piece.js";
import { AppError } from "../../../shared/errors/AppError.js";

export const PieceService = {
  // üìç Lista todas as pe√ßas
  async list() {
    try {
      return await PieceRepository.findAll();
    } catch (error) {
      console.error("‚ùå Erro ao listar pe√ßas:", error);
      throw new AppError("Erro interno ao listar pe√ßas.", 500);
    }
  },

  // üìç Cria uma nova pe√ßa
  async create(data) {
    if (!data.code || !data.name || !data.quantity) {
      throw new AppError("Campos obrigat√≥rios ausentes: code, name e quantity.", 400);
    }

    const existing = await PieceRepository.findByCode(data.code);
    if (existing) {
      throw new AppError("Pe√ßa j√° cadastrada com este c√≥digo.", 409);
    }

    try {
      const piece = new Piece(data);
      return await PieceRepository.create(piece);
    } catch (error) {
      if (error instanceof AppError) throw error;
      console.error("‚ùå Erro ao criar pe√ßa:", error);
      throw new AppError("Erro interno ao criar pe√ßa.", 500);
    }
  },

  // üìç Atualiza uma pe√ßa
  async update(id, data) {
    if (!id) {
      throw new AppError("ID da pe√ßa n√£o informado.", 400);
    }
    if (!Object.keys(data).length) {
      throw new AppError("Nenhum dado informado para atualiza√ß√£o.", 400);
    }

    const found = await PieceRepository.findById(id);
    if (!found) {
      throw new AppError("Pe√ßa n√£o encontrada.", 404);
    }

    try {
      return await PieceRepository.update(id, data);
    } catch (error) {
      if (error instanceof AppError) throw error;
      console.error("‚ùå Erro ao atualizar pe√ßa:", error);
      throw new AppError("Erro interno ao atualizar pe√ßa.", 500);
    }
  },

  // üìç Remove uma pe√ßa
  async remove(id) {
    if (!id) {
      throw new AppError("ID da pe√ßa n√£o informado.", 400);
    }

    const found = await PieceRepository.findById(id);
    if (!found) {
      throw new AppError("Pe√ßa n√£o encontrada.", 404);
    }

    try {
      await PieceRepository.delete(id);
      return { message: "Pe√ßa removida com sucesso." };
    } catch (error) {
      if (error instanceof AppError) throw error;
      console.error("‚ùå Erro ao remover pe√ßa:", error);
      throw new AppError("Erro interno ao remover pe√ßa.", 500);
    }
  },

  // üìç Busca uma pe√ßa por ID
  async findById(id) {
    if (!id) {
      throw new AppError("ID da pe√ßa n√£o informado.", 400);
    }

    try {
      const piece = await PieceRepository.findById(id);
      if (!piece) {
        throw new AppError("Pe√ßa n√£o encontrada.", 404);
      }
      return piece;
    } catch (error) {
      if (error instanceof AppError) throw error;
      console.error("‚ùå Erro ao buscar pe√ßa:", error);
      throw new AppError("Erro interno ao buscar pe√ßa.", 500);
    }
  },

  // üìç Busca uma pe√ßa por c√≥digo
  async findByCode(code) {
    if (!code) {
      throw new AppError("C√≥digo da pe√ßa n√£o informado.", 400);
    }

    try {
      const piece = await PieceRepository.findByCode(code);
      if (!piece) {
        throw new AppError("Pe√ßa n√£o encontrada.", 404);
      }
      return piece;
    } catch (error) {
      if (error instanceof AppError) throw error;
      console.error("‚ùå Erro ao buscar pe√ßa por c√≥digo:", error);
      throw new AppError("Erro interno ao buscar pe√ßa por c√≥digo.", 500);
    }
  },
};