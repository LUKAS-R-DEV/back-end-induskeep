import { NotificationRepository } from "../infrastructure/NotificationRepository.js";
import { Notification } from "../domain/Notification.js";
import { AppError } from "../../../shared/errors/AppError.js";

export const NotificationService = {
  // üìç Lista todas as notifica√ß√µes
  async list() {
    try {
      return await NotificationRepository.findAll();
    } catch (error) {
      console.error("‚ùå Erro ao listar notifica√ß√µes:", error);
      throw new AppError("Erro interno ao listar notifica√ß√µes.", 500);
    }
  },

  // üìç Cria notifica√ß√£o se n√£o houver outra igual recente
  async createIfNotExists({ title, message, userId = null, scheduleId = null, windowMinutes = 1440 }) {
    if (!message) {
      throw new AppError("Campo obrigat√≥rio ausente: message.", 400);
    }

    const since = new Date(Date.now() - windowMinutes * 60 * 1000);
    const existing = await NotificationRepository.findRecent({ title: title || "Notifica√ß√£o do sistema", message, since });
    if (existing) {
      return existing;
    }

    return this.create({ title, message, userId, scheduleId });
  },

  // üìç Lista notifica√ß√µes por usu√°rio
  async listByUser(userId) {
    if (!userId) {
      throw new AppError("ID do usu√°rio √© obrigat√≥rio.", 400);
    }

    try {
      return await NotificationRepository.findAllByUser(userId);
    } catch (error) {
      if (error instanceof AppError) throw error;
      console.error("‚ùå Erro ao buscar notifica√ß√µes do usu√°rio:", error);
      throw new AppError("Erro interno ao buscar notifica√ß√µes do usu√°rio.", 500);
    }
  },

  // üìç Cria uma nova notifica√ß√£o
  async create(data) {
  if (!data.message) {
    throw new AppError("Campo obrigat√≥rio ausente: message.", 400);
  }

  // Permite notifica√ß√µes autom√°ticas sem userId/scheduleId
  const notificationData = {
    title: data.title || "Notifica√ß√£o do sistema",
    message: data.message,
    userId: data.userId || null,
    scheduleId: data.scheduleId || null,
    read: false,
  };

  try {
    const notification = new Notification(notificationData);
    return await NotificationRepository.create(notification.toJSON());
  } catch (error) {
    if (error instanceof AppError) throw error;
    console.error("‚ùå Erro ao criar notifica√ß√£o:", error);
    throw new AppError("Erro interno ao criar notifica√ß√£o.", 500);
  }
  },

 
  async update(id, data) {
    if (!id) {
      throw new AppError("ID da notifica√ß√£o n√£o informado.", 400);
    }
    if (!Object.keys(data).length) {
      throw new AppError("Nenhum dado informado para atualiza√ß√£o.", 400);
    }

    const found = await NotificationRepository.findById(id);
    if (!found) {
      throw new AppError("Notifica√ß√£o n√£o encontrada.", 404);
    }

    try {
      return await NotificationRepository.update(id, data);
    } catch (error) {
      if (error instanceof AppError) throw error;
      console.error("‚ùå Erro ao atualizar notifica√ß√£o:", error);
      throw new AppError("Erro interno ao atualizar notifica√ß√£o.", 500);
    }
  },

  // üìç Remove uma notifica√ß√£o
  async delete(id) {
    if (!id) {
      throw new AppError("ID da notifica√ß√£o n√£o informado.", 400);
    }

    const found = await NotificationRepository.findById(id);
    if (!found) {
      throw new AppError("Notifica√ß√£o n√£o encontrada.", 404);
    }

    try {
      await NotificationRepository.delete(id);
      return { message: "Notifica√ß√£o removida com sucesso." };
    } catch (error) {
      if (error instanceof AppError) throw error;
      console.error("‚ùå Erro ao deletar notifica√ß√£o:", error);
      throw new AppError("Erro interno ao deletar notifica√ß√£o.", 500);
    }
  },

  // Alias para manter compatibilidade com o controller
  async remove(id) {
    return this.delete(id);
  },

  // üìç Marca notifica√ß√£o como lida
  async markAsRead(id) {
    if (!id) {
      throw new AppError("ID da notifica√ß√£o n√£o informado.", 400);
    }

    const found = await NotificationRepository.findById(id);
    if (!found) {
      throw new AppError("Notifica√ß√£o n√£o encontrada.", 404);
    }

    try {
      return await NotificationRepository.markAsRead(id);
    } catch (error) {
      if (error instanceof AppError) throw error;
      console.error("‚ùå Erro ao marcar notifica√ß√£o como lida:", error);
      throw new AppError("Erro interno ao marcar notifica√ß√£o como lida.", 500);
    }
  },

  // üìç Busca uma notifica√ß√£o por ID
  async findById(id) {
    if (!id) {
      throw new AppError("ID da notifica√ß√£o n√£o informado.", 400);
    }

    try {
      const notification = await NotificationRepository.findById(id);
      if (!notification) {
        throw new AppError("Notifica√ß√£o n√£o encontrada.", 404);
      }
      return notification;
    } catch (error) {
      if (error instanceof AppError) throw error;
      console.error("‚ùå Erro ao buscar notifica√ß√£o:", error);
      throw new AppError("Erro interno ao buscar notifica√ß√£o.", 500);
    }
  },
};