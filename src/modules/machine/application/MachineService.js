import { MachineRepository } from "../infrastructure/MachineRepository.js";
import { Machine } from "../domain/Machine.js";
import { AppError } from "../../../shared/errors/AppError.js";

export const MachineService = {
  // üìç Lista todas as m√°quinas
  async list() {
    return await MachineRepository.findAll();
  },


  async create({ name, serial, location, userId }) {
    if (!name || !serial || !userId) {
      throw new AppError("Campos obrigat√≥rios ausentes: name, serial e userId.", 400);
    }

    const existing = await MachineRepository.findBySerial(serial);
    if (existing) {
      throw new AppError("N√∫mero de s√©rie j√° cadastrado.", 409);
    }

    try {
      const machine = new Machine(name, serial, location, userId);
      return await MachineRepository.create(machine.toJson());
    } catch (error) {
      console.error("‚ùå Erro ao criar m√°quina:", error);
      throw new AppError("Erro interno ao criar m√°quina.", 500);
    }
  },

 
  async update(id, data) {
    if (!id) throw new AppError("ID da m√°quina n√£o informado.", 400);
    if (!Object.keys(data).length) throw new AppError("Nenhum dado informado para atualiza√ß√£o.", 400);

    const machine = await MachineRepository.findById(id);
    if (!machine) {
      throw new AppError("M√°quina n√£o encontrada.", 404);
    }

    try {
      return await MachineRepository.update(id, data);
    } catch (error) {
      console.error("‚ùå Erro ao atualizar m√°quina:", error);
      throw new AppError("Erro interno ao atualizar m√°quina.", 500);
    }
  },

  async remove(id) {
    if (!id) throw new AppError("ID da m√°quina n√£o informado.", 400);

    const machine = await MachineRepository.findById(id);
    if (!machine) {
      throw new AppError("M√°quina n√£o encontrada.", 404);
    }

    try {
      await MachineRepository.delete(id);
      return { message: "M√°quina removida com sucesso." };
    } catch (error) {
      console.error("‚ùå Erro ao excluir m√°quina:", error);
      throw new AppError("Erro interno ao excluir m√°quina.", 500);
    }
  },
};
