import { StockRepository } from "../infrastructure/StockRepository.js";
import { StockMovement } from "../domain/StockMovement.js";
import { AppError } from "../../../shared/errors/AppError.js";


export const StockService = {
  // üìç Lista todas as movimenta√ß√µes de estoque
  async list() {
    try {
      return await StockRepository.findAll();
    } catch (error) {
      console.error("‚ùå Erro ao listar movimenta√ß√µes de estoque:", error);
      throw new AppError("Erro interno ao listar movimenta√ß√µes de estoque.", 500);
    }
  },

  // üìç Registra uma movimenta√ß√£o de estoque
  async move(data) {
    if (!data.pieceId || !data.quantity || !data.type) {
      throw new AppError("Campos obrigat√≥rios ausentes: pieceId, quantity e type.", 400);
    }

    if (data.quantity <0||data.quantity===0) {
      throw new AppError("Quantidade deve ser maior que zero.", 400);
    }

    if (!['ENTRY', 'EXIT', 'ADJUSTMENT'].includes(data.type)) {
      throw new AppError("Tipo de movimenta√ß√£o inv√°lido. Use: ENTRY, EXIT ou ADJUSTMENT.", 400);
    }

    try {
      const movement = new StockMovement(data);
      return await StockRepository.registerMovement(movement);
    } catch (error) {
      if (error instanceof AppError) throw error;
      console.error("‚ùå Erro ao registrar movimenta√ß√£o de estoque:", error);
      throw new AppError("Erro interno ao registrar movimenta√ß√£o de estoque.", 500);
    }
  },

  // üìç Busca movimenta√ß√µes por pe√ßa
  async findByPiece(pieceId) {
    if (!pieceId) {
      throw new AppError("ID da pe√ßa n√£o informado.", 400);
    }

    try {
      return await StockRepository.findByPiece(pieceId);
    } catch (error) {
      if (error instanceof AppError) throw error;
      console.error("‚ùå Erro ao buscar movimenta√ß√µes por pe√ßa:", error);
      throw new AppError("Erro interno ao buscar movimenta√ß√µes por pe√ßa.", 500);
    }
  },

  // üìç Busca movimenta√ß√µes por per√≠odo
  async findByPeriod(startDate, endDate) {
    if (!startDate || !endDate) {
      throw new AppError("Data inicial e final s√£o obrigat√≥rias.", 400);
    }

    try {
      return await StockRepository.findByPeriod(startDate, endDate);
    } catch (error) {
      if (error instanceof AppError) throw error;
      console.error("‚ùå Erro ao buscar movimenta√ß√µes por per√≠odo:", error);
      throw new AppError("Erro interno ao buscar movimenta√ß√µes por per√≠odo.", 500);
    }
  },

  // üìç Remove uma movimenta√ß√£o
  async remove(id) {
    if (!id) {
      throw new AppError("ID da movimenta√ß√£o n√£o informado.", 400);
    }

    const found = await StockRepository.findById(id);
    if (!found) {
      throw new AppError("Movimenta√ß√£o n√£o encontrada.", 404);
    }

    try {
      await StockRepository.delete(id);
      return { message: "Movimenta√ß√£o removida com sucesso." };
    } catch (error) {
      if (error instanceof AppError) throw error;
      console.error("‚ùå Erro ao remover movimenta√ß√£o:", error);
      throw new AppError("Erro interno ao remover movimenta√ß√£o.", 500);
    }
  },
};