import { MaintenanceOrderRepository } from "../infrastructure/MaintenanceOrderRepository.js";
import { MaintenanceOrder } from "../domain/MaintenanceOrder.js";
import { AppError } from "../../../shared/errors/AppError.js";

export const MaintenanceOrderService = {
  // üìç Lista todas as ordens de manuten√ß√£o
  async list() {
    try {
      return await MaintenanceOrderRepository.findAll();
    } catch (error) {
      console.error("‚ùå Erro ao listar ordens de manuten√ß√£o:", error);
      throw new AppError("Erro interno ao listar ordens de manuten√ß√£o.", 500);
    }
  },

  // üìç Cria uma nova ordem de manuten√ß√£o
  async create(data) {
    if (!data.machineId || !data.description || !data.priority) {
      throw new AppError("Campos obrigat√≥rios ausentes: machineId, description e priority.", 400);
    }

    try {
      const order = new MaintenanceOrder(data);
      return await MaintenanceOrderRepository.create(order);
    } catch (error) {
      if (error instanceof AppError) throw error;
      console.error("‚ùå Erro ao criar ordem de manuten√ß√£o:", error);
      throw new AppError("Erro interno ao criar ordem de manuten√ß√£o.", 500);
    }
  },

  // üìç Atualiza uma ordem de manuten√ß√£o
  async update(id, data) {
    if (!id) {
      throw new AppError("ID da ordem de manuten√ß√£o n√£o informado.", 400);
    }
    if (!Object.keys(data).length) {
      throw new AppError("Nenhum dado informado para atualiza√ß√£o.", 400);
    }

    const found = await MaintenanceOrderRepository.findById(id);
    if (!found) {
      throw new AppError("Ordem de manuten√ß√£o n√£o encontrada.", 404);
    }

    try {
      return await MaintenanceOrderRepository.update(id, data);
    } catch (error) {
      if (error instanceof AppError) throw error;
      console.error("‚ùå Erro ao atualizar ordem de manuten√ß√£o:", error);
      throw new AppError("Erro interno ao atualizar ordem de manuten√ß√£o.", 500);
    }
  },

  // üìç Remove uma ordem de manuten√ß√£o
  async remove(id) {
    if (!id) {
      throw new AppError("ID da ordem de manuten√ß√£o n√£o informado.", 400);
    }

    const found = await MaintenanceOrderRepository.findById(id);
    if (!found) {
      throw new AppError("Ordem de manuten√ß√£o n√£o encontrada.", 404);
    }

    try {
      await MaintenanceOrderRepository.delete(id);
      return { message: "Ordem de manuten√ß√£o removida com sucesso." };
    } catch (error) {
      if (error instanceof AppError) throw error;
      console.error("‚ùå Erro ao remover ordem de manuten√ß√£o:", error);
      throw new AppError("Erro interno ao remover ordem de manuten√ß√£o.", 500);
    }
  },

  // üìç Busca uma ordem de manuten√ß√£o por ID
  async findById(id) {
    if (!id) {
      throw new AppError("ID da ordem de manuten√ß√£o n√£o informado.", 400);
    }

    try {
      const order = await MaintenanceOrderRepository.findById(id);
      if (!order) {
        throw new AppError("Ordem de manuten√ß√£o n√£o encontrada.", 404);
      }
      return order;
    } catch (error) {
      if (error instanceof AppError) throw error;
      console.error("‚ùå Erro ao buscar ordem de manuten√ß√£o:", error);
      throw new AppError("Erro interno ao buscar ordem de manuten√ß√£o.", 500);
    }
  },
};
