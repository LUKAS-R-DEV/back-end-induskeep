generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



enum Role {
  TECHNICIAN
  SUPERVISOR
  ADMIN
}



model User {
  id             String          @id @default(uuid()) @db.Uuid
  name           String
  email          String          @unique
  password       String
  role           Role            @default(TECHNICIAN)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  // Relações
  machines       Machine[]       @relation("UserMachines")
  orders         MaintenanceOrder[]
  schedules      Schedule[]
  notifications  Notification[]
  stockMovements StockMovement[]
  passwordResetTokens PasswordResetToken[]
  auditLogs      AuditLog[]      @relation("UserAuditLogs")

}

model Machine {
  id             String           @id @default(uuid()) @db.Uuid
  name           String
  serial         String           @unique
  location       String?
  status         String           @default("ACTIVE")
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  // Relações
  user           User             @relation("UserMachines", fields: [userId], references: [id])
  userId         String           @db.Uuid
  orders         MaintenanceOrder[]
  schedules      Schedule[]
}



model MaintenanceOrder {
  id             String           @id @default(uuid()) @db.Uuid
  title          String
  description    String?
  status         String           @default("PENDING")
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  // Relações
  user           User             @relation(fields: [userId], references: [id])
  userId         String           @db.Uuid
  machine        Machine          @relation(fields: [machineId], references: [id])
  machineId      String           @db.Uuid
  items          OrderItem[]
  history        History?
}



model OrderItem {
  id             String           @id @default(uuid()) @db.Uuid
  quantity       Int              @default(1)
  usedAt         DateTime         @default(now())

  // Relações
  order          MaintenanceOrder @relation(fields: [orderId], references: [id])
  orderId        String           @db.Uuid
  piece          Piece            @relation(fields: [pieceId], references: [id])
  pieceId        String           @db.Uuid
}

model Piece {
  id             String           @id @default(uuid()) @db.Uuid
  name           String
  code           String           @unique
  quantity       Int              @default(0)
  minStock       Int              @default(0)
  unitPrice      Float?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  stockMovements StockMovement[]

  // Relações
  items          OrderItem[]
}



model History {
  id             String           @id @default(uuid()) @db.Uuid
  completedAt    DateTime         @default(now())
  notes          String?

  // Relações
  order          MaintenanceOrder @relation(fields: [orderId], references: [id])
  orderId        String           @unique @db.Uuid
}

model Schedule {
  id             String           @id @default(uuid()) @db.Uuid
  date           DateTime
  notes          String?
  createdAt      DateTime         @default(now())

  // Relações
  user           User             @relation(fields: [userId], references: [id])
  userId         String           @db.Uuid
  machine        Machine          @relation(fields: [machineId], references: [id])
  machineId      String           @db.Uuid
  notifications  Notification[]
}



model Notification {
  id             String           @id @default(uuid()) @db.Uuid
  message        String
  createdAt      DateTime         @default(now())
  read           Boolean          @default(false)

  // Relações
  user           User?            @relation(fields: [userId], references: [id])
  userId         String?          @db.Uuid
  schedule       Schedule?        @relation(fields: [scheduleId], references: [id])
  scheduleId     String?          @db.Uuid
}

model StockMovement {
  id        String   @id @default(uuid()) @db.Uuid
  quantity  Int
  type      String
  notes     String?
  movedAt   DateTime @default(now())

  // Relações
  piece     Piece    @relation(fields: [pieceId], references: [id])
  pieceId   String   @db.Uuid      
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid      
}

model PasswordResetToken {
  id        String   @id @default(uuid()) @db.Uuid
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model AuditLog {
  id         String   @id @default(uuid()) @db.Uuid
  action     String
  module     String
  targetId   String?
  userId     String?  @db.Uuid
  ip         String?
  userAgent  String?
  metadata   Json?
  createdAt  DateTime @default(now())

  user       User?    @relation("UserAuditLogs", fields: [userId], references: [id])

  @@index([module, action, createdAt])
  @@index([userId, createdAt])
}
model Settings {
  id                   String   @id @default(uuid()) @db.Uuid
  minStockThreshold    Int      @default(5)
  autoNotifyLowStock   Boolean  @default(true)
  defaultRepairDuration Int?    // minutos
  notificationEmail    String?  @unique
  maintenanceWindow    String?  // ex: "08:00-18:00"
  updatedAt            DateTime @updatedAt
}

